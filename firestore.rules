rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the current user is an admin.
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid))
             && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for public-facing data (treatments, products, videos)
    match /treatments/{treatmentId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /videos/{videoId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Rules for the appointments collection
    match /appointments/{appointmentId} {
      // Any authenticated user can create and read their own appointment.
      allow create: if request.auth != null;
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
      // Only admins can update or delete any appointment.
      allow update, delete: if isAdmin();
      // Allow admins to list all appointments
      allow list: if isAdmin();
    }

    // Admins collection should not be writable from the client-side for security.
    match /admins/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false; // Disallow client-side writes completely
    }
  }
}
