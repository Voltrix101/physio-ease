
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Admins collection: read-only for checking status
    match /admins/{userId} {
      allow read: if request.auth != null;
      allow write: if false; // Nobody can write to the admins collection from the client
    }

    // Appointments: Patients can create for themselves, admins can manage all
    match /appointments/{appointmentId} {
      // Any authenticated user can create an appointment, but only for themselves.
      allow create: if request.auth != null && request.resource.data.patientId == request.auth.uid;
      
      // Patients can only read their own appointments. Admins can read any.
      allow read: if (request.auth != null && resource.data.patientId == request.auth.uid) || isAdmin();
      
      // Only admins can update the status of an appointment.
      allow update: if isAdmin();

      // No one should be able to delete appointments from the client.
      allow delete: if false;
    }

    // Treatments: Publicly readable, but only manageable by admins
    match /treatments/{treatmentId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Products: Publicly readable, but only manageable by admins
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Videos: Publicly readable, but only manageable by admins
    match /videos/{videoId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Testimonials: Publicly readable, but only manageable by admins
    match /testimonials/{testimonialId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}
